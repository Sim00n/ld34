package com.puzdrowski.decision.entity;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.puzdrowski.decision.Game;

public class FactorEntity extends Entity {

	private boolean isCurrent;
	private boolean isAffective;
	private Texture hoverTexture;
	private Texture icon;
	
	//33
	public static enum FACTORS {
		POPULATION_GROWTH, RELIGIOUS_FREEDOM, CLIMATE_WARMING, MILITARIZATION,
		NASA, NUCLEAR_ENERGY, QUANTUM_COMPUTING, ELECTRIC_CARS, VACCINES, STD_PREVENTION,
		HIGH_UNIVERSITY_COST, GLOBAL_POLICE, INDUSTRY_REGULATION, UNITED_NATIONS,
		BAN_ON_ALCOHOL, BAN_ON_DRUGS, MEDICAL_RESEARCH, FISHING_QUOTAS, ANIMAL_PROTECTION,
		INFO_FREEDOM, MINIMUM_WAGE, GENEVA_CONVENTION, BAN_ON_SMOKING, CONFORMITY, DIVERSITY,
		GENDER_EQUALITY, MARRAIGE_EQUALITY, CIA_PRISONS, POPULATION_TRACKING, CCTV, 
		ALCOHOL_TAX, CORPORATION_TAX, PROPERTY_TAX
	};
	
	
	public FactorEntity(Texture texture, int x, int y, float theta, TYPE type, int i, Texture hoverTexture) {
		super(texture, x, y, theta, type, i);
		this.isCurrent = false;
		this.isAffective= false;
		icon = new Texture(Gdx.files.internal("textures/icons/education.png"));
		this.hoverTexture = hoverTexture;
	}

	public void update(float tick, float rollingSpeed) {
		super.update(tick);

		if(type == TYPE.OUTER) {
			x = (int) (Game.WIDTH/2 - 40 + Math.cos(Math.toRadians(theta * order - rollingSpeed)) * 550);
			y = (int) (Game.HEIGHT/2 - 100 + Math.sin(Math.toRadians(theta * order - rollingSpeed)) * 280);
		} else if(type == TYPE.MIDDLE) {
			x = (int) (Game.WIDTH/2 - 40 + Math.cos(Math.toRadians(theta * order - rollingSpeed)) * 340);
			y = (int) (Game.HEIGHT/2 - 100 + Math.sin(Math.toRadians(theta * order - rollingSpeed)) * 180);
		} else if(type == TYPE.INNER) {
			x = (int) (Game.WIDTH/2 - 40 + Math.cos(Math.toRadians(theta * order - rollingSpeed)) * 130);
			y = (int) (Game.HEIGHT/2 - 100 + Math.sin(Math.toRadians(theta * order - rollingSpeed)) * 100);
		}
	}
	
	@Override
	public void render(Batch batch) {
		if(isCurrent) {
			batch.draw(hoverTexture, x, y, 96, 96);
			batch.draw(icon, x+15, y+12, 64, 64);
		} else {
			batch.draw(texture, x, y, 80, 80);
			batch.draw(icon, x+12, y+15, 54, 54);
		}
	}
	
	public void toggle(boolean tog) {
		isCurrent = tog;
	}
	
	public void toggle() {
		isCurrent = !isCurrent;
	}
	
	public void toggleAffect(boolean tog) {
		isAffective = tog;
	}
	
	public void toggleAffect() {
		isAffective = !isAffective;
	}
}
