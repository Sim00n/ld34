package com.puzdrowski.decision.stages;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.ui.Button;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.ui.Window;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable;
import com.badlogic.gdx.utils.Align;
import com.puzdrowski.decision.Game;
import com.puzdrowski.decision.GameWorld;
import com.puzdrowski.decision.entity.FactorEntity;

public class MenuStage extends StageWrapper {

	private Window window;
	private Label text;
	private Label stats;
	private Image image;
	private Button startButton, exitButton;
	public boolean showing;
	
	public MenuStage(Game game) {
		super(game);
		showing = false;
	}

	public void updateData() {	
		Gdx.input.setInputProcessor(stage);
	}
	
	@Override
	public void elements() {
		super.elements();
		
		image = new Image(new Texture(Gdx.files.internal("textures/logo.png")));
		
		Table table = new Table();
		
		text = new Label("123", skin);
		text.setWrap(true);
		text.setWidth(300);
		
		startButton = new TextButton("Start Game", skin);
		exitButton = new TextButton("Exit", skin);
		
		
		table.add(image).width(200f);
		table.add(text).width(300f);
		table.add(stats).width(300f);
		table.row().padTop(30f);
		
		Table buttonTable = new Table();
		buttonTable.add(changeButton);
		buttonTable.add(skipButton).padLeft(30f);
	
		table.add(buttonTable).colspan(3);
		
		window.add(table);
		stage.addActor(window);
		
		listeners();
	}
	
	@Override
	public void render() {
		if(showing)
			super.render();
	}
	
	public void listeners() {
		changeButton.addListener(new ClickListener() {
			@Override
			public void clicked(InputEvent event, float x, float y) {
				currentFactor.setAffective(!currentFactor.isAffective());
				showing = false;
				GameWorld.button_sound.play();
			}
		});
		
		skipButton.addListener(new ClickListener() {
			@Override
			public void clicked(InputEvent event, float x, float y) {
				showing = false;
				GameWorld.button_sound.play();
			}
		});
	}
	
	
}
