package com.puzdrowski.decision;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.puzdrowski.decision.stages.GameStage;

public class GameWorld {

	private Game game;
	private SpriteBatch batch;
	private OrthographicCamera camera;

	private GameStage gameStage;

	private Texture txt_background;
	private Texture board;
	private Texture button_test;
	private Texture button_test2;
	
	private enum SCREEN {WELCOME, GAME, PAUSE, EXIT};
	private SCREEN screen;
	
	public GameWorld(Game game) {
		this.game = game;
		initialize();
	}
	
	private void initialize() {
		camera = new OrthographicCamera();
		camera.setToOrtho(false, Game.WIDTH, Game.HEIGHT);
		batch = new SpriteBatch();
		
		gameStage = new GameStage(this.game);
		screen = SCREEN.GAME;
		
		txt_background = new Texture(Gdx.files.internal("textures/background_big.png"));
		board = new Texture(Gdx.files.internal("textures/board.png"));
		button_test = new Texture(Gdx.files.internal("textures/button.png"));
		button_test2 = new Texture(Gdx.files.internal("textures/button_pressed.png"));
	}
	
	public void update(float tick) {
		switch(screen) {
		case GAME:
			gameStage.update(tick);
		break;
		default:
		break;		
		}
	}
	
	public void render() {
		camera.update();
		batch.setProjectionMatrix(camera.combined);
		
		batch.begin();		
		batch.draw(txt_background, 0f, 0f, Game.WIDTH, Game.HEIGHT);
		System.out.println(Game.WIDTH/2 - board.getWidth() + " - " + Game.HEIGHT/2 - board.getHeight());
		batch.draw(board, Game.WIDTH/2 - board.getWidth(), Game.HEIGHT/2 - board.getHeight(), Game.WIDTH, Game.HEIGHT, board.getWidth(), board.getHeight());
		for(int i = 0; i < 10; i++) {
			for(int j = 0; j < 5; j++) {
				batch.draw(button_test2, i * 130f, j * 130f + Game.HEIGHT/2 - 128, 80, 80);
			}
			
		}
		batch.end();
		
		/*switch(screen) {
		case GAME:
			gameStage.render();
		break;
		default:
		break;
		}*/
		
	}	
	
}

