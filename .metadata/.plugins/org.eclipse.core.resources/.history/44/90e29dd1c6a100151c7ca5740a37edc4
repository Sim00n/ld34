package com.puzdrowski.decision;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.puzdrowski.decision.entity.Entity.TYPE;
import com.puzdrowski.decision.entity.FactorEntity;
import com.puzdrowski.decision.entity.FactorEntity.FACTORS;
import com.puzdrowski.decision.input.Keyboard;
import com.puzdrowski.decision.stages.FactorStage;
import com.puzdrowski.decision.stages.HintStage;
import com.puzdrowski.decision.stages.WinStage;

public class GameWorld {

	private Game game;
	private SpriteBatch batch;
	private OrthographicCamera camera;

	private HintStage hintStage;
	private WinStage winStage;
	private FactorStage factorStage;

	private Texture txt_background, board, button, big_button, big_button_hover, button_hover_t;
	private BitmapFont font;
	
	private enum SCREEN {WELCOME, GAME, END};
	private SCREEN screen;
	
	private boolean rolling = false;
	private float rollingSpeed = 0.0f;
	private float rollingDamping = 0.0f;
	private float rollingTimer = 0.0f;
	private static final float ROLLING_DAMPING_DAMPING= 0.995f;
	public static final float ROLLING_LIMIT = 15f;
	
	FactorEntity[] factors = new FactorEntity[22+12+6];
	FactorEntity currentFactor;
	
	private boolean[] button_hover = new boolean[4];
	
	public GameWorld(Game game) {
		this.game = game;
		initialize();
	}
	
	private void initialize() {
		camera = new OrthographicCamera();
		camera.setToOrtho(false, Game.WIDTH, Game.HEIGHT);
		batch = new SpriteBatch();
		
		hintStage = new HintStage(this.game);
		winStage = new WinStage(this.game);
		factorStage = new FactorStage(this.game);
		screen = SCREEN.GAME;
		
		txt_background = new Texture(Gdx.files.internal("textures/bg_alt.png"));
		board = new Texture(Gdx.files.internal("textures/board.png"));
		button = new Texture(Gdx.files.internal("textures/button.png"));
		big_button = new Texture(Gdx.files.internal("textures/big_button.png"));
		big_button_hover = new Texture(Gdx.files.internal("textures/big_button_hover.png"));
		button_hover_t = new Texture(Gdx.files.internal("textures/button_hover.png"));
		
		font = new BitmapFont();
		font.setColor(new Color(0.1f, 0.42f, 0.78f, 1f)); // Buttons' font
		
		for(int i = 0; i < button_hover.length; i++) {
			button_hover[i] = false;
		}
		
		float theta = 0.0f;
		theta = 360f/22f;
		factors[0] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 0, FACTORS.ALCOHOL_TAX);
		factors[1] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 1, FACTORS.ANIMAL_PROTECTION);
		factors[2] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 2, FACTORS.BAN_ON_ALCOHOL);
		factors[3] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 3, FACTORS.BAN_ON_DRUGS);
		factors[4] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 4, FACTORS.BAN_ON_SMOKING);
		factors[5] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 5, FACTORS.CCTV);
		factors[6] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 6, FACTORS.CIA_PRISONS);
		factors[7] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 7, FACTORS.CLIMATE_WARMING);
		factors[8] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 8, FACTORS.CONFORMITY);
		factors[9] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 9, FACTORS.CORPORATION_TAX);
		factors[10] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 10, FACTORS.DIVERSITY);
		factors[11] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 11, FACTORS.ELECTRIC_CARS);
		factors[12] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 12, FACTORS.FISHING_QUOTAS);
		factors[13] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 13, FACTORS.GENDER_EQUALITY);
		factors[14] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 14, FACTORS.GENEVA_CONVENTION);
		factors[15] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 15, FACTORS.GLOBAL_POLICE);
		factors[16] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 16, FACTORS.HIGH_UNIVERSITY_COST);
		factors[17] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 17, FACTORS.INDUSTRY_REGULATION);
		factors[18] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 18, FACTORS.INFO_FREEDOM);
		factors[19] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 19, FACTORS.MARRIAGE_EQUALITY);
		factors[20] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 20, FACTORS.MEDICAL_RESEARCH);
		factors[21] = new FactorEntity(button, button_hover_t, theta, TYPE.OUTER, 21, FACTORS.MILITARIZATION);
		
		theta = 360f/12f;
		factors[22] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 0, FACTORS.MINIMUM_WAGE);
		factors[23] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 1, FACTORS.NASA);
		factors[24] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 2, FACTORS.NUCLEAR_ENERGY);
		factors[25] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 3, FACTORS.POPULATION_GROWTH);
		factors[26] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 4, FACTORS.POPULATION_TRACKING);
		factors[27] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 5, FACTORS.PROPERTY_TAX);
		factors[28] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 6, FACTORS.QUANTUM_COMPUTING);
		factors[29] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 7, FACTORS.RELIGIOUS_FREEDOM);
		factors[30] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 8, FACTORS.STD_PREVENTION);
		factors[31] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 9, FACTORS.UNITED_NATIONS);
		factors[32] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 10, FACTORS.VACCINES);
		factors[33] = new FactorEntity(button, button_hover_t, theta, TYPE.MIDDLE, 11, FACTORS.HIGH_UNEMPLOYMENT);
				
		theta = 360f/6f;
		factors[34] = new FactorEntity(button, button_hover_t, theta, TYPE.INNER, 0, FACTORS.UTILITY_TAX);
		factors[35] = new FactorEntity(button, button_hover_t, theta, TYPE.INNER, 1, FACTORS.OPEN_TRADE);
		factors[36] = new FactorEntity(button, button_hover_t, theta, TYPE.INNER, 2, FACTORS.RENEWABLE_ENERGY);
		factors[37] = new FactorEntity(button, button_hover_t, theta, TYPE.INNER, 3, FACTORS.SEWER_TREATMENT);
		factors[38] = new FactorEntity(button, button_hover_t, theta, TYPE.INNER, 4, FACTORS.EPIDEMICS);
		factors[39] = new FactorEntity(button, button_hover_t, theta, TYPE.INNER, 5, FACTORS.DISASTER_PREVENTION);
		
		endRolling();
	}
	
	public void update(float tick) {
		
		roll(tick);
		buttons(tick);
		factors(tick);
		
		if(Keyboard.isDown(Keyboard.END)) {
			Metrics.HUNGER = 100f;
			Metrics.WAR = 100f;
			Metrics.HAPPINESS = 0f;
			winStage.updateData();
			screen = SCREEN.END;
		}
		
		switch(screen) {
		case GAME:
			hintStage.update(tick);
			factorStage.update(tick);
			break;
		case END:
			winStage.update(tick);
			break;
		default: break;
		}
	}
	
	private void roll(float tick) {
		if(rolling) {
			rollingSpeed += rollingDamping;
			rollingDamping *= ROLLING_DAMPING_DAMPING;
			if(rollingSpeed <= ROLLING_LIMIT) {
				rolling = false;
				rollingTimer = 5.0f;
				endRolling();
			}
		} else {
			if(rollingTimer > 0) {
				rollingTimer -= tick;
			}
		}
	}
	
	private void endRolling() {
		FactorEntity oldFactor = currentFactor;
		if(oldFactor != null) {
			oldFactor.toggle(false);
		}
		
		currentFactor = factors[(int) (Math.random() * factors.length)];
		
		evolve(oldFactor, currentFactor);
		verifyWinCondition();
		currentFactor.toggle(true);
		factorStage.updateData(currentFactor);
	}
	
	private void startRolling() {
		if(rollingTimer <= 0 && !rolling) {
			rolling = true;
			rollingSpeed = 500.0f;
			rollingDamping = -3.0f;
		}
	}
	
	private void buttons(float tick) {
		int mX = Gdx.input.getX();
		int mY = Game.HEIGHT - Gdx.input.getY();
		
		button_hover[0] = (mX > Game.WIDTH/1.34f && mX < Game.WIDTH/1.34f + 96 && mY > Game.HEIGHT/1.155f && mY < Game.HEIGHT/1.155f + 96);
		button_hover[1] = (mX > 0 && mX < 64 && mY > 0 && mY < 64);
		button_hover[3] = (mX > 0 + 64 && mX < 0 + 64 + 64 && mY > 0 && mY < 164);
		
		if(button_hover[0] && Gdx.input.isButtonPressed(Input.Keys.LEFT)) {
			startRolling();
		} else if(button_hover[1] && Gdx.input.isButtonPressed(Input.Keys.LEFT)) {
			Gdx.app.exit();
		}
		
		hintStage.showing = false;
		for(int i = 0; i < factors.length; i++) {
			FactorEntity f = factors[i];
			if(mX > f.getX() && mX < f.getX() + 96 && mY > f.getY() && mY < f.getY() + 96) {
				hintStage.updateData(f);
				hintStage.showing = true;
			}
		}
	}
	
	private void factors(float tick) {
		for(int i = 0; i < factors.length; i++) {
			factors[i].update(tick, rollingSpeed);
		}
	}
	
	private void renderButtons() {
		if(screen == SCREEN.GAME) {
			if(button_hover[0])
				batch.draw(big_button_hover, Game.WIDTH/1.34f, Game.HEIGHT/1.155f, 96, 96);
			else
				batch.draw(big_button, Game.WIDTH/1.34f, Game.HEIGHT/1.155f, 96, 96);
			if(rollingTimer > 0)
				font.draw(batch, "Advance\n    (" + (int)rollingTimer + ")",  Game.WIDTH/1.314f, Game.HEIGHT/1.050f);
			else
				font.draw(batch, "Roll", Game.WIDTH/1.299f, Game.HEIGHT/1.064f);
		}
		
		if(button_hover[1])
			batch.draw(big_button_hover, 0, 0, 64, 64);
		else
			batch.draw(big_button, 0, 0, 64, 64);
		font.draw(batch, "Quit", 64/3.3f, 64/1.58f);
		
		if(screen == SCREEN.GAME) {
			if(button_hover[3])
				batch.draw(big_button_hover, 0 + 64, 0, 64, 64);
			else
				batch.draw(big_button, 0 + 64, 0, 64, 64);
			font.draw(batch, "Help",  0 + 64 + 64/3.3f, 64/1.58f);
		}
	}
	
	public void render() {
		camera.update();
		batch.setProjectionMatrix(camera.combined);

		batch.begin();
		batch.draw(txt_background, 0f, 0f, Game.WIDTH, Game.HEIGHT);
		batch.end();
		
		if(screen == SCREEN.GAME) {
			batch.begin();
			batch.draw(board, 0, Game.HEIGHT - 150, Game.WIDTH, 250);
			for(int i = 0; i < factors.length; i++) {
				factors[i].render(batch);						
			}
			batch.end();

			Metrics.render(batch);
			hintStage.render();
		} else if(screen == SCREEN.END) {
			winStage.render();	
		}

		batch.begin();
		renderButtons();
		batch.end();
	}
	
	private void evolve(FactorEntity old, FactorEntity current) {
				
		Metrics.HEALTH_D = Metrics.FOOD_D = Metrics.TECH_D = Metrics.ENV_D = Metrics.SPACE_D = Metrics.DRUG_D = Metrics.EDUCATION_D = Metrics.JOBS_D = Metrics.INFRASTRUCTURE_D = Metrics.VODKA_D = Metrics.WIFI_D = Metrics.ENERGY_D = Metrics.LAW_D = Metrics.PEACE_D = Metrics.LOVE = 0f;
		
		for(int i = 0; i < factors.length; i++) {
			FactorEntity fe = factors[i];
			FACTORS f = fe.getFactor();
			int a = (fe.isAffective())? 1 : -1;
			
			if(f == FACTORS.POPULATION_GROWTH) {
				Metrics.FOOD_D 				+= a * -0.3f;
				Metrics.INFRASTRUCTURE_D 	+= a * -0.5f;
				Metrics.ENERGY_D 			+= a * 0.3f;
			}
			if(f == FACTORS.RELIGIOUS_FREEDOM) {
				Metrics.EDUCATION_D 		+= a * 5.4f;
				Metrics.LAW_D 				+= a * 0.4f;
				Metrics.PEACE_D 			+= a * 0.6f;
			}
			if(f == FACTORS.CLIMATE_WARMING) {
				Metrics.FOOD_D 				+= a * -0.9f;
				Metrics.ENV_D 				+= a * -1.2f;
				Metrics.JOBS_D 				+= a * 0.6f;
				Metrics.INFRASTRUCTURE_D	+= a * -0.8f;
				Metrics.ENERGY_D 			+= a * 0.3f;
				Metrics.PEACE_D 			+= a * -0.1f;
			}
			if(f == FACTORS.MILITARIZATION) {
				Metrics.INFRASTRUCTURE_D 	+= a * 0.3f;
				Metrics.ENERGY_D 			+= a * 0.5f;
				Metrics.LAW_D 				+= a * 0.9f;
				Metrics.PEACE_D				+= a * -0.1f;
			}
			if(f == FACTORS.NASA) {
				Metrics.HEALTH_D 			+= a * 0.8f;
				Metrics.FOOD				+= a * 0.5;
				Metrics.TECH_D				+= a * 1.5f;
				Metrics.EDUCATION_D 		+= a * 0.45f;
			}
			if(f == FACTORS.NUCLEAR_ENERGY) {
				Metrics.HEALTH_D			+= a * -0.1f;
				Metrics.TECH_D				+= a * 0.3f;
				Metrics.ENV_D				+= a * -0.1f;
				Metrics.ENERGY_D			+= a * 1.1f;
				Metrics.PEACE_D				+= a * -0.5f;
			}
			if(f == FACTORS.QUANTUM_COMPUTING) {
				Metrics.TECH_D				+= a * 1.2f;
				Metrics.EDUCATION_D			+= a * 0.4f;
				Metrics.WIFI_D				+= a * 1.0f;
				Metrics.ENERGY_D			+= a * 0.3f;
				Metrics.PEACE_D				+= a * 0.1f;
			}
			if(f == FACTORS.ELECTRIC_CARS) {
				Metrics.TECH_D				+= a * 1.1f;
				Metrics.SPACE_D				+= a * 0.8f;
				Metrics.JOBS_D				+= a * 0.2f;
				Metrics.ENERGY_D			+= a * 0.86;
				Metrics.ENV_D				+= a * 1.13;
			}
			if(f == FACTORS.VACCINES) {
				Metrics.HEALTH_D			+= a * 1.2f;
				Metrics.SPACE_D				+= a * 0.1f;			
				Metrics.PEACE_D				+= a * 0.1f;
			}
			if(f == FACTORS.STD_PREVENTION) {
				Metrics.HEALTH_D			+= a * 1.1f;
				Metrics.SPACE_D				+= a * 0.1f;
				Metrics.PEACE_D				+= a * 0.1f;
			}
			if(f == FACTORS.HIGH_UNIVERSITY_COST) {
				Metrics.HEALTH_D			+= a * -0.3f;
				Metrics.TECH_D				+= a * -0.76f;
				Metrics.SPACE_D				+= a * -1.3f;
				Metrics.EDUCATION_D			+= a * -1.2f;
				Metrics.WIFI_D				+= a * -0.2f;
				Metrics.ENERGY_D			+= a * -0.1f;
			}
			if(f == FACTORS.GLOBAL_POLICE) {
				Metrics.DRUG_D				+= a * -1.6f;
				Metrics.VODKA_D				+= a * -0.2f;
				Metrics.LAW_D				+= a * 1.1f;
				Metrics.LOVE_D				+= a * 0.2f;
			}
			if(f == FACTORS.INDUSTRY_REGULATION) {
				Metrics.HEALTH_D			+= a * 1.9f;
				Metrics.TECH_D				+= a * 0.2f;
				Metrics.SPACE_D				+= a * -0.23f;
				Metrics.JOBS_D				+= a * -0.53f;
				Metrics.INFRASTRUCTURE_D	+= a * -9.3f;
				Metrics.ENERGY_D			+= a * -0.2f;
			}
			if(f == FACTORS.UNITED_NATIONS) {
				Metrics.TECH_D				+= a * 0.3f;
				Metrics.FOOD_D				+= a * 0.7;
				Metrics.ENV_D				+= a * 0.3;
				Metrics.PEACE_D				+= a * 1.6f;
				Metrics.LOVE_D				+= a * 1.1f;
			}
			if(f == FACTORS.BAN_ON_ALCOHOL) {
				Metrics.HEALTH_D			+= a * 1.1f;
				Metrics.ENV_D				+= a * 0.3;
				Metrics.VODKA_D				+= a * -5.2f;
				Metrics.PEACE_D				+= a * -0.5f;
				Metrics.LAW_D				+= a * -0.78f;
			}
			if(f == FACTORS.BAN_ON_DRUGS) {
				Metrics.HEALTH_D			+= a * 1.7f;
				Metrics.ENV_D				+= a * 0.3;
				Metrics.VODKA_D				+= a * -0.1f;
				Metrics.PEACE_D				+= a * -0.5f;
				Metrics.LAW_D				+= a * -0.9f;
			}
			if(f == FACTORS.MEDICAL_RESEARCH) {
				Metrics.HEALTH_D			+= a * 1.7f;
				Metrics.ENV_D				+= a * 0.8;
				Metrics.PEACE_D				+= a * 0.5f;
				Metrics.EDUCATION_D			+= a * 2.5f;
				Metrics.SPACE_D				+= a * 0.75f;
			}
			if(f == FACTORS.FISHING_QUOTAS) {
				Metrics.FOOD_D				+= a * -0.2f;
				Metrics.ENV_D				+= a * 1.5f;
				Metrics.JOBS_D				+= a * -0.7f;
				Metrics.PEACE_D				+= a * -0.3f;
			}
			if(f == FACTORS.ANIMAL_PROTECTION) {
				Metrics.ENV_D				+= a * 0.8f;
				Metrics.PEACE_D				+= a * 0.5f;
				Metrics.LOVE_D				+= a * 0.6f;
			}
			if(f == FACTORS.INFO_FREEDOM) {
				Metrics.TECH_D				+= a * 1.3;
				Metrics.EDUCATION_D			+= a * 1.3f;
				Metrics.LAW_D				+= a * 0.7f;
				Metrics.PEACE_D				+= a * 1.5f;
			}
			if(f == FACTORS.MINIMUM_WAGE) {
				Metrics.HEALTH_D			+= a * 0.95f;
				Metrics.JOBS_D				+= a * -0.5f;
				Metrics.PEACE_D				+= a * 0.3f;
			}
			if(f == FACTORS.GENEVA_CONVENTION) {
				Metrics.LAW_D				+= a * 1.2f;
				Metrics.PEACE_D				+= a * 3.1f;
			}
			if(f == FACTORS.BAN_ON_SMOKING) {
				Metrics.HEALTH_D			+= a * 1.83f;
				Metrics.ENV_D				+= a * 1.2f;
				Metrics.DRUG_D				+= a * -0.13f;
				Metrics.PEACE_D				+= a * -0.8f;
				Metrics.LOVE_D				+= a * -1.03f;
			}
			if(f == FACTORS.CONFORMITY) {
				Metrics.EDUCATION_D			+= a * -1.03f;
				Metrics.LOVE_D				+= a * -1.33f;
				Metrics.PEACE_D				+= a * 1.03f;
				Metrics.LAW_D				+= a * 1.03f;
				Metrics.VODKA_D				+= a * 1.03f;
			}
			if(f == FACTORS.DIVERSITY) {
				Metrics.EDUCATION_D			+= a * 1.3f;
				Metrics.LOVE_D				+= a * 1.0f;
				Metrics.PEACE_D				+= a * 3.3f;
				Metrics.LAW_D				+= a * -1.1f;
				Metrics.SPACE_D				+= a * 0.5;
			}
			if(f == FACTORS.GENDER_EQUALITY) {
				Metrics.EDUCATION_D			+= a * 0.3f;
				Metrics.LOVE_D				+= a * 2.0f;
				Metrics.PEACE_D				+= a * 1.3f;
				Metrics.HEALTH_D			+= a * 0.3f;
				Metrics.JOBS_D				+= a * 0.76f;
			}
			if(f == FACTORS.MARRIAGE_EQUALITY) {
				Metrics.EDUCATION_D			+= a * 0.3f;
				Metrics.LOVE_D				+= a * 3.0f;
				Metrics.PEACE_D				+= a * 2.0f;
				Metrics.HEALTH_D			+= a * 0.1f;
			}
			if(f == FACTORS.CIA_PRISONS) {
				Metrics.LAW_D				+= a * 1.3f;
				Metrics.PEACE_D				+= a * -0.8f;
			}
			if(f == FACTORS.POPULATION_TRACKING) {
				Metrics.LAW_D				+= a * 1.3f;
				Metrics.PEACE_D				+= a * -1.2f;
				Metrics.LOVE_D				+= a * -0.5f;
			}
			if(f == FACTORS.CCTV) {
				Metrics.LAW_D				+= a * 2.1f;
				Metrics.PEACE_D				+= a * -1.2f;
				Metrics.LOVE_D				+= a * -2.5f;
			}
			if(f == FACTORS.ALCOHOL_TAX) {
				Metrics.HEALTH_D			+= a * 0.8f;
				Metrics.ENV_D				+= a * 0.3f;
				Metrics.JOBS_D				+= a * 0.51f;
				Metrics.LAW_D				+= a * -0.81f;
				Metrics.PEACE_D				+= a * -0.9f;
			}
			if(f == FACTORS.CORPORATION_TAX) {
				Metrics.TECH_D				+= a * -0.9f;
				Metrics.ENV_D				+= a * 0.1f;
				Metrics.EDUCATION_D			+= a * -0.3f;
				Metrics.JOBS_D				+= a * -1.6f;
				Metrics.ENERGY_D			+= a * -0.2f;
			}
			if(f == FACTORS.PROPERTY_TAX) {
				Metrics.ENV_D				+= a * 0.6f;
				Metrics.EDUCATION_D			+= a * 0.1f;
				Metrics.JOBS_D				+= a * 0.6f;
				Metrics.ENERGY_D			+= a * 0.2f;
			}
			if(f == FACTORS.HIGH_UNEMPLOYMENT) {
				Metrics.HEALTH_D			+= a * -1.1f;
				Metrics.SPACE_D				+= a * -2.1f;
				Metrics.EDUCATION_D			+= a * -1.3f;
				Metrics.INFRASTRUCTURE_D	+= a * -1.4f;
				Metrics.JOBS_D				+= a * -5.32f;
				Metrics.PEACE_D				+= a * -2.3f;			
			}
			if(f == FACTORS.UTILITY_TAX) {
				Metrics.HEALTH_D			+= a * 1.1f;
				Metrics.JOBS_D				+= a * 0.65f;
				Metrics.ENV_D				+= a * 0.93f;
				Metrics.INFRASTRUCTURE_D	+= a * 5.3f;
				Metrics.ENERGY_D			+= a * -0.3f;
			}
			if(f == FACTORS.OPEN_TRADE) {
				Metrics.JOBS_D				+= a * 1.25f;
				Metrics.INFRASTRUCTURE_D	+= a * 1.3f;
				Metrics.ENERGY_D			+= a * 0.62f;
				Metrics.SPACE_D				+= a * 1.3f;
				Metrics.DRUG_D				+= a * 2.1f;				
			}
			if(f == FACTORS.RENEWABLE_ENERGY) {
				Metrics.ENERGY_D			+= a * 3.22f;
				Metrics.JOBS_D		 		+= a * 1.03f;
				Metrics.INFRASTRUCTURE_D	+= a * 2.34f;
				Metrics.WIFI_D				+= a * 3.1f;
				Metrics.VODKA_D				+= a * 0.53f;
			}
			if(f == FACTORS.SEWER_TREATMENT) {
				Metrics.HEALTH_D			+= a * 0.73f;
				Metrics.FOOD_D				+= a * 0.53f;
				Metrics.ENERGY_D			+= a * 0.52f;
				Metrics.INFRASTRUCTURE_D	+= a * 0.51f;
				Metrics.PEACE_D				+= a * 0.86f;
			}
			if(f == FACTORS.EPIDEMICS) {
				Metrics.HEALTH_D			+= a * -4.52f;
				Metrics.FOOD_D				+= a * -2.52f;
				Metrics.PEACE_D				+= a * -1.83f;
				Metrics.DRUG_D				+= a * 1.2f;
				Metrics.LAW_D				+= a * -0.52f;
				Metrics.VODKA_D				+= a * -0.3f;
			}
			if(f == FACTORS.DISASTER_PREVENTION) {
				Metrics.INFRASTRUCTURE_D	+= a * 2.4f;
				Metrics.TECH_D				+= a * 1.2f;
				Metrics.WIFI_D				+= a * 1.4f;
			}
		}
		
		/**
		 * Main:
		 * HEALTH, FOOD, TECH, ENV, SPACE, DRUG, EDUCATION, JOBS, INFRASTRUCTURE,
		 * VODKA, WIFI, ENERGY, LAW, PEACE, LOVE
		 * 
		 * Side:
		 * HUNGER, WAR, HAPPINESS
		 * 
		 * Factors:
		 * POPULATION_GROWTH, RELIGIOUS_FREEDOM, CLIMATE_WARMING, MILITARIZATION,
		 * NASA, NUCLEAR_ENERGY, QUANTUM_COMPUTING, ELECTRIC_CARS, VACCINES, STD_PREVENTION,
		 * HIGH_UNIVERSITY_COST, GLOBAL_POLICE, INDUSTRY_REGULATION, UNITED_NATIONS,
		 * BAN_ON_ALCOHOL, BAN_ON_DRUGS, MEDICAL_RESEARCH, FISHING_QUOTAS, ANIMAL_PROTECTION,
		 * INFO_FREEDOM, MINIMUM_WAGE, GENEVA_CONVENTION, BAN_ON_SMOKING, CONFORMITY, DIVERSITY,
		 * GENDER_EQUALITY, MARRIAGE_EQUALITY, CIA_PRISONS, POPULATION_TRACKING, CCTV, 
		 * ALCOHOL_TAX, CORPORATION_TAX, PROPERTY_TAX, HIGH_UNEMPLOYMENT, UTILITY_TAX,
		 * OPEN_TRADE, RENEWABLE_ENERGY, SEWER_TREATMENT, EPIDEMICS, DISASTER_PREVENTION
		 */
		
		Metrics.HEALTH 			+= Metrics.HEALTH_D;
		Metrics.FOOD 			+= Metrics.FOOD_D;
		Metrics.TECH			+= Metrics.TECH_D;
		Metrics.ENV				+= Metrics.ENV_D;
		Metrics.SPACE			+= Metrics.SPACE_D;
		Metrics.DRUG 			+= Metrics.DRUG_D;
		Metrics.EDUCATION		+= Metrics.EDUCATION_D;
		Metrics.JOBS			+= Metrics.JOBS_D;
		Metrics.INFRASTRUCTURE	+= Metrics.INFRASTRUCTURE_D;
		Metrics.VODKA			+= Metrics.VODKA_D;
		Metrics.WIFI			+= Metrics.WIFI_D;
		Metrics.ENERGY			+= Metrics.ENERGY_D;
		Metrics.LAW				+= Metrics.LAW_D;
		Metrics.PEACE			+= Metrics.PEACE_D;
		Metrics.LOVE			+= Metrics.LOVE_D;
		
		//System.out.println(Metrics.HEALTH_D + ", " + Metrics.FOOD_D + ", " + Metrics.TECH_D + ", " + Metrics.ENV_D + ", " + Metrics.SPACE_D + ", " + Metrics.DRUG_D + ", " + Metrics.EDUCATION_D + ", " + Metrics.JOBS_D + ", " + Metrics.INFRASTRUCTURE_D + ", " + Metrics.VODKA_D + ", " + Metrics.WIFI_D + ", " + Metrics.ENERGY_D + ", " + Metrics.LAW_D + ", " + Metrics.PEACE_D + ", " + Metrics.LOVE_D);
		
		if(Metrics.HEALTH > 100f) Metrics.HEALTH = 100f;
		if(Metrics.HEALTH < 0f)   Metrics.HEALTH = 0f;
		
		if(Metrics.FOOD > 100f) Metrics.FOOD = 100f;
		if(Metrics.FOOD < 0f)   Metrics.FOOD = 0f;
		
		if(Metrics.TECH > 100f) Metrics.TECH = 100f;
		if(Metrics.TECH < 0f)   Metrics.TECH = 0f;
		
		if(Metrics.ENV > 100f) Metrics.ENV = 100f;
		if(Metrics.ENV < 0f)   Metrics.ENV = 0f;
		
		if(Metrics.SPACE > 100f) Metrics.SPACE = 100f;
		if(Metrics.SPACE < 0f)   Metrics.SPACE = 0f;
		
		if(Metrics.DRUG > 100f) Metrics.DRUG = 100f;
		if(Metrics.DRUG < 0f)   Metrics.DRUG = 0f;
		
		if(Metrics.EDUCATION > 100f) Metrics.EDUCATION = 100f;
		if(Metrics.EDUCATION < 0f)   Metrics.EDUCATION = 0f;
		
		if(Metrics.JOBS > 100f) Metrics.JOBS = 100f;
		if(Metrics.JOBS < 0f)   Metrics.JOBS = 0f;
		
		if(Metrics.INFRASTRUCTURE > 100f) Metrics.INFRASTRUCTURE = 100f;
		if(Metrics.INFRASTRUCTURE < 0f)   Metrics.INFRASTRUCTURE = 0f;
		
		if(Metrics.VODKA > 100f) Metrics.VODKA = 100f;
		if(Metrics.VODKA < 0f)   Metrics.VODKA = 0f;
		
		if(Metrics.WIFI > 100f) Metrics.WIFI = 100f;
		if(Metrics.WIFI < 0f)   Metrics.WIFI = 0f;
		
		if(Metrics.LAW > 100f) Metrics.LAW = 100f;
		if(Metrics.LAW < 0f)   Metrics.LAW = 0f;
		
		if(Metrics.PEACE > 100f) Metrics.PEACE = 100f;
		if(Metrics.PEACE < 0f)   Metrics.PEACE = 0f;
		
		if(Metrics.LOVE > 100f) Metrics.LOVE = 100f;
		if(Metrics.LOVE < 0f)   Metrics.LOVE = 0f;
		
		Metrics.HAPPINESS_D += (Metrics.HEALTH-40) * 0.007f;
		Metrics.HAPPINESS_D += (Metrics.FOOD-60) * 0.006f;
		Metrics.HAPPINESS_D += (Metrics.TECH-30) * 0.0008f;
		Metrics.HAPPINESS_D += (Metrics.ENV-40) * 0.003f;
		Metrics.HAPPINESS_D += (Metrics.SPACE-10) * 0.0005f;
		Metrics.HAPPINESS_D += -(Metrics.DRUG-65) * 0.001f;
		Metrics.HAPPINESS_D += (Metrics.EDUCATION-45) * 0.001f;
		Metrics.HAPPINESS_D += (Metrics.JOBS-60) * 0.003f;
		Metrics.HAPPINESS_D += (Metrics.INFRASTRUCTURE-35) * 0.0006f;
		Metrics.HAPPINESS_D += (Metrics.VODKA-10) * 0.003f;
		Metrics.HAPPINESS_D += (Metrics.WIFI-15) * 0.0007f;
		Metrics.HAPPINESS_D += (Metrics.LAW-45) * 0.005f;
		Metrics.HAPPINESS_D += (Metrics.PEACE-70) * 0.001f;
		Metrics.HAPPINESS_D += (Metrics.LOVE-55) * 0.009f;
		
		Metrics.HUNGER_D += -(Metrics.HEALTH-50) * 0.01f;
		Metrics.HUNGER_D += -(Metrics.FOOD-85) * 0.016f;
		Metrics.HUNGER_D += -(Metrics.TECH-30) * 0.0001f;
		Metrics.HUNGER_D += -(Metrics.ENV-35) * 0.003f;
		Metrics.HUNGER_D += -(Metrics.SPACE-5) * 0.0002f;
		Metrics.HUNGER_D += (Metrics.DRUG-15) * 0.0004f;
		Metrics.HUNGER_D += -(Metrics.EDUCATION-10) * 0.0001f;
		Metrics.HUNGER_D += -(Metrics.JOBS-35) * 0.007f;
		Metrics.HUNGER_D += -(Metrics.INFRASTRUCTURE-65) * 0.002f;
		Metrics.HUNGER_D += -(Metrics.VODKA-30) * 0.003f;
		Metrics.HUNGER_D += -(Metrics.WIFI-5) * 0.0007f;
		Metrics.HUNGER_D += -(Metrics.LAW-10) * 0.0005f;
		Metrics.HUNGER_D += -(Metrics.PEACE-36) * 0.0001f;
		Metrics.HUNGER_D += -(Metrics.LOVE-10) * 0.0003f;
		
		Metrics.WAR_D += -(Metrics.HEALTH-40) * 0.001f;
		Metrics.WAR_D += -(Metrics.FOOD-40) * 0.001f;
		Metrics.WAR_D += -(Metrics.TECH-40) * 0.01f;
		Metrics.WAR_D += -(Metrics.ENV-70) * 0.014f;
		Metrics.WAR_D += -(Metrics.SPACE-30) * 0.0002f;
		Metrics.WAR_D += (Metrics.DRUG-70) * 0.004f;
		Metrics.WAR_D += -(Metrics.EDUCATION-75) * 0.005f;
		Metrics.WAR_D += -(Metrics.JOBS-75) * 0.007f;
		Metrics.WAR_D += -(Metrics.INFRASTRUCTURE-62) * 0.001f;
		Metrics.WAR_D += -(Metrics.VODKA-10) * 0.003f;
		Metrics.WAR_D += -(Metrics.WIFI-10) * 0.0007f;
		Metrics.WAR_D += -(Metrics.LAW-45) * 0.005f;
		Metrics.WAR_D += -(Metrics.PEACE-90) * 0.07f;
		Metrics.WAR_D += -(Metrics.LOVE-71) * 0.013f;
		
		Metrics.HAPPINESS		+= Metrics.HAPPINESS_D;
		Metrics.HUNGER			+= Metrics.HUNGER_D;
		Metrics.WAR				+= Metrics.WAR_D;
		
		if(Metrics.HAPPINESS > 100f) Metrics.HAPPINESS = 100f;
		if(Metrics.HAPPINESS < 0f)   Metrics.HAPPINESS = 0f;
		
		if(Metrics.HUNGER > 100f) Metrics.HUNGER = 100f;
		if(Metrics.HUNGER < 0f)   Metrics.HUNGER = 0f;
		
		if(Metrics.WAR > 100f) Metrics.WAR = 100f;
		if(Metrics.WAR < 0f)   Metrics.WAR = 0f;
		
		Metrics.showDeltas = true;	
	}
	
	private void verifyWinCondition() {
		if((Metrics.HAPPINESS >= 100f && Metrics.HUNGER <= 0f && Metrics.WAR <= 0f)
				|| (Metrics.HAPPINESS <= 0f && Metrics.HUNGER >= 0f && Metrics.WAR >= 0f)) {
			screen = SCREEN.END;
			winStage.updateData();
		}	
	}
	
}

















